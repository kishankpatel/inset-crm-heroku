- unless @project_statuses.present?
  -if ( @current_organization.projects.where("project_stage_id is null and project_type is null").count > 0)
    - @project_statuses = [{name: "Not Assigned", id: ""}] + @current_organization.project_stages.where(:is_active=>true).order("position asc").all.map{|prj| {name: prj.name, id: prj.id}}
  -else
    -  @project_statuses = @current_organization.project_stages.where(:is_active=>true).order("position asc").all.map{|prj| {name: prj.name, id: prj.id}}
#kanbanCanvas
  #kanbanContainer
    #kanbanStages.kanban.animate-panel{"data-child"=>"hpanel"}
      %table
        %tbody
          %tr{:height => "44"}
            %td
              .stages.ready
                - params[:user_id] = nil if(!params[:user_id].present?) 
                %ul{:style => ""}
                  - total_amount=[]
                  
                  - @project_statuses.each do |project_stage|
                    %li.showWeighted{"data-stage-id" => project_stage[:id]}
                      %span.stagename{title: project_stage[:name]}
                        = project_stage[:name]
                      %b
                        - if params[:user_id].present? && params[:user_id] != 'All'
                          - total_projects = @current_organization.projects.where(project_manager_id: params[:user_id],project_stage_id: project_stage[:id].present? ? project_stage[:id] : nil,is_archive: false,project_type: nil)                           
                        - else
                          - total_projects = @current_organization.projects.where(project_stage_id: project_stage[:id].present? ? project_stage[:id]: nil,is_archive: false,project_type: nil)    
                        = total_projects.count
          %tr
            %td#projectsContainer
              .projects.hasScrollbar.ready.narrow
                .emptyPipeline.hidden
                .projectsTable
                  - @project_statuses.each do |project_stage|
                    - if params[:user_id].present? && params[:user_id] != 'All'
                      - total_projects = @current_organization.projects.includes(:project_jobs).where(project_manager_id: params[:user_id],project_stage_id: project_stage[:id].present? ? project_stage[:id] : nil,is_archive: false,project_type: nil).order("updated_at DESC")     
                    - else
                      - total_projects = @current_organization.projects.includes(:project_jobs).where( project_stage_id: project_stage[:id].present? ? project_stage[:id] : nil,is_archive: false,project_type: nil).order("updated_at DESC")
                    .stage.droppable_stage{name: "#{project_stage[:name]}"}
                      - total_projects.each do |project|
                        .hpanel.hgreen.m-b-none
                          /.panel-heading
                          /  = project.name.truncate(15)  
                          .panel-body.draggable_project.p-xs{id: "status_#{project.id}", draggable: "true", name: "#{project.id}"}
                            .block.tooltip-demo{id: "project_#{project.id}"}
                              %div.ellipsis-div{:"data-toggle"=>"tooltip",:title=>project.linked_with}
                                -if project.linked_with == "Opportunity"
                                  =(project.deal.present? ? ( project.deal.is_active ? link_to(project.deal.title, "/leads/"+project.deal.to_param, :title => project.deal.title, :class=>"change-color-ll") : link_to(project.deal.title, "javascript:void(0)", :title => "Sorry!! The respective opportunity linked with Lead, '#{lead_name(project)}' has been deleted by '#{deactivated_by(project)}'.", :class=>"change-color-ll", style:"color:#999;cursor:not-allowed;text-decoration:none;") ) : "")
                                -elsif project.linked_with == "Contact"  
                                  = project.individual_contact.present? ? link_to(project.individual_contact.name, "/contact/"+project.individual_contact.to_param, :title => project.individual_contact.name, :class=>"change-color-ll") : ""
                                -elsif project.linked_with == "Organization"  
                                  = project.company_contact.present? ? link_to(project.company_contact.name, "/company_contacts/"+project.company_contact.to_param, :title => project.company_contact.name, :class=>"change-color-ll") : ""
                              %a.front{:draggable => "false", :href => "/projects/#{project.id}"}
                                %div
                                  .ellipsis-div{title:project.name,:"data-toggle"=>"tooltip"}  
                                    %strong 
                                      = project.name
                                  
                                    /%i.fal.fa-chalkboard-teacher

                                  %span.fr
                                    %span.kanban_stage_status{:class=>project.is_completed ? "completed" :  project.project_jobs.count > 0 ? "started" : ''}
                                      = project.status 
                                  .cb
                                %div.m-t-sm.m-b-sm.ellipsis-div{:"data-toggle"=>"tooltip",:title=>"Project manager"}
                                  %i.fas.fa-user-tie
                                  =project.project_manager.present? ? project.project_manager.full_name.present? ? project.project_manager.full_name: project.project_manager.email : ""
                                
                                / %br
                                / %i.fal.fa-calendar
                                / Last Activity: 
                                / %br
                                / =project.updated_at.strftime("%b %d, %Y @ %H:%M %P")
                              
                               
                              .cb 
                              / .lead_name
                              /   %i.fal.fa-suitcase 
                              /   ="Lead: " 
                              /   = " N/A " if !project.individual_contact.present?
                              /   = project.individual_contact.present? ? link_to(project.individual_contact.name.truncate(15), "/contact/"+project.individual_contact.to_param, :title => project.individual_contact.name, :class=>"change-color-ll") : ""
                              /   - individual_contact = project.individual_contact
                              / .opportunity 
                              /   %i.fal.fa-briefcase 
                              /   ="Opportunity: " 
                              /   = " N/A " if !project.deal.present? 
                              /   =(project.deal.present? ? ( project.deal.is_active ? link_to(project.deal.title.truncate(15), "/leads/"+project.deal.to_param, :title => project.deal.title, :class=>"change-color-ll") : link_to(project.deal.title.truncate(15), "javascript:void(0)", :title => "Sorry!! The respective opportunity linked with Lead, '#{lead_name(project)}' has been deleted by '#{deactivated_by(project)}'.", :class=>"change-color-ll", style:"color:#999;cursor:not-allowed;text-decoration:none;") ) : "")
                              / - deal_amount = project.deal.present? && project.deal.amount.present? ? number_to_currency(project.deal.amount.to_f, precision: 2).gsub("$", "") : 0
                              / - if deal_amount != 0  
                              /   .value 
                              /     - if project.deal.currency_type == 'S$'
                              /       - currency = 'SGD($)'
                              /     - elsif project.deal.currency_type == '€'
                              /       - currency = 'EUR(€)'
                              /     - elsif project.deal.currency_type == 'INR'
                              /       - currency = 'INR'
                              /     - elsif project.deal.currency_type == '£'
                              /       - currency = 'GBP(£)'
                              /     - elsif project.deal.currency_type == 'DZD'
                              /       - currency = 'DZD'
                              /     - else
                              /       - currency = 'USD($)'
                                  
                              /     %span{title:"Amount #{currency}"}
                              /       = project.deal.currency_type
                              /       = deal_amount
                              /   .cb
                              %span.fl.users
                                /%i.fal.fa-user{title: "Users","data-toggle" =>"tooltip"}
                                /= project.project_users.map{|p|p.user}.compact.count
                                - project.project_users.each do |puser|
                                  - user= puser.associated_user
                                  - if user
                                    - user_name =  user.full_name.present? ? user.full_name : user.email
                                    - title = "#{user.id == project.project_manager_id ? (user_name + ' (Project Manager)') : user_name}"
                                    -if user.image.present?
                                      %span.mr5{"data-toggle"=>"tooltip",:title=>title}
                                        %img.img-circle.img-small-xs.mt5{:alt => "logo", :src => user.image.image(:thumb),:onError=>"this.src='/assets/new-ui/user.png';this.onerror=null;"}
                                    -else
                                      %span.profile-icon-xs.img-small-xs.mr5.mt5{style: "background: #{user.get_user_color_code(user_name[0].downcase)} !important", "data-toggle"=>"tooltip",:title=>title }
                                        =user_name[0].upcase
                              %span.fr.jobs.btn.btn-outline.btn-primary.btn-xs
                                %span.jobs_count
                                  = project.project_jobs.count
                                Jobs
                              .cb                                  
                                
- if  @current_organization.projects.present?
  =render :partial=> '/project_jobs/project_job_popup',:locals=>{:project_id=> @current_organization.projects.first.id}
:javascript
  //initialize_tooltipster();
  // $('#dealmoveModal').on('show.bs.modal', function (e) {
  //   $("#deal_move_note").val("")
  // });
  // $('#move_deal_popup').bind('ajax:complete', function(evt, data, status, xhr){
  //   //alert('complete')
  //   $("#dealmoveModal").modal('hide');    
  //   show_kanban_view();
  // });
  function change_assign_drop(obj)
  {
    //alert(obj);
    var ini_id = $("#new_initr_id").val();
    var assn_id = $("#new_assign_id").val();
    $("#flag_id").val(1);
    if(obj == "Won" || obj == "Lost" ){
      $('#assigned_to_user').removeAttr('required');
      $('#mv_dl_asign').fadeOut("slow");
    }else
    {
      $('#assigned_to_user').prop('required',true);
      $('#mv_dl_asign').fadeIn("slow");
    }
    if(obj == "Junk"){$('#assigned_to_user').val(ini_id);}else{ $('#assigned_to_user').val(assn_id); }
    if($("#flag_id").val() == "1")
    {
      $("#chk_radio_act").hide();
    }
    if(obj == "Not Qualified" || obj == "Lost" || obj == "Junk"){
     $('#deal_move_note').prop('required',true);
     }else{$('#deal_move_note').prop('required',false);}
  }
  function chk_radiobtn()
  {
    var chak_flag = $("#flag_id").val();
    if(chak_flag == "0")
    {
      $("#chk_radio_act").show();
      $("#chk_radio_act").html('Please select an option from below!')
      return false;
    }
    
  }

  // Implement drag and drop functionality
  $( function() {
    $( ".draggable_project" ).draggable({helper: "clone",
      containment: "div.kanban_view",
      start: function(e, ui)
        {
          $(ui.helper).css({"border":"1px solid #999","box-shadow":"0 0 10px #777","-ms-transform":"rotate(7deg)","-webkit-transform":"rotate(7deg)","transform":"rotate(7deg)","background":"#f1f1f1"});
        }
    });
    $( ".droppable_stage" ).droppable({
      drop: function( event, ui ) {
        //retrieve the lead_id and status name from draggable lead and dropable status
        lead_id = ui.draggable.attr("name");
        project_id = ui.draggable.attr("name");
        status = $(this).attr("name");
        var cur_lead;
        cur_lead = "status_"+project_id.toString();
        x = $("#"+cur_lead).closest(".droppable_stage").attr("name");
        
        if(x == status){
          $(".draggable_project").css({"z-index":"0","cursor":"default"});
          $( ".droppable_stage .status_content" ).css({"border":"1px solid #e5e5e5"});
          //alert("Opps! Lead has already the dropped Status");
          return false;
        }
        $('#task_loader,.fixed_loader').show();
        var user_id=$("#filter_by_user").val();
        $.ajax( {
          type: "POST",
          url: "/change_project_status?user_id="+user_id,
          data: {project_id: project_id, status: status},
          success: function(result) {
            //$("#view_content").html("").html(result);
            $('#task_loader,.fixed_loader').hide();
            //$(document).trigger("add-alerts", [{'message': "" ,'priority': 'success'}]);
            //$(".alert.alert-success ul").html("").html("Lead has been moved successfully.");
            show_alert_message("success","Project has been moved successfully.");
            show_project_kanban_view(true)
           
          },
          error: function(res) {
              alert("Some error has been occured.");
              $('#task_loader,.fixed_loader').hide();
          }
        });
      }
    });
  } );
  
  // Display movable Lead as the top of all other Lead
  $( ".draggable_project" ).mousedown(function(){
    $(this).css({"z-index":"1","cursor":"crosshair"});
  });
  $( ".draggable_project" ).click(function(){
    $(".draggable_project").css({"z-index":"0"});
    $(this).css({"z-index":"1","cursor":"crosshair"});
  });
  $(".draggable_project").bind('drag',function( event ){
    $( ".droppable_stage .status_content" ).css({"border":"1px solid #0099CB"});
    $( this ).closest(".status_content").css({"border":"1px solid #e5e5e5"});
  });


  $(document).ready(function () {   
    // $('.tooltip-custom').tooltipster({
    //   theme: 'tooltipster-noir',
    //       maxWidth: 360   
    // });
  });
  //$("#total_open_opportunities_amount").text($("#total_open_amount").text());
  
  